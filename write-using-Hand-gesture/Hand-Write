import cv2
import mediapipe as mp
import numpy as np
import math

# Initialize Mediapipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(
    max_num_hands=1,
    min_detection_confidence=0.7,
    min_tracking_confidence=0.5
)
mp_draw = mp.solutions.drawing_utils

canvas = None
cap = cv2.VideoCapture(0)

cv2.namedWindow("Hand Drawing", cv2.WND_PROP_FULLSCREEN)
cv2.setWindowProperty("Hand Drawing", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

prev_x, prev_y = None, None

def distance(p1, p2):
    return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame = cv2.flip(frame, 1)

    if canvas is None:
        canvas = np.zeros_like(frame)

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb_frame)

    if results.multi_hand_landmarks:
        hand_landmarks = results.multi_hand_landmarks[0]
        h, w, _ = frame.shape

        # Index finger tip coords (landmark 8)
        x_index = int(hand_landmarks.landmark[8].x * w)
        y_index = int(hand_landmarks.landmark[8].y * h)

        # Middle finger tip coords (landmark 12)
        x_middle = int(hand_landmarks.landmark[12].x * w)
        y_middle = int(hand_landmarks.landmark[12].y * h)

        # Draw green circles on index and middle fingertips
        cv2.circle(frame, (x_index, y_index), 10, (0, 255, 0), cv2.FILLED)
        cv2.circle(frame, (x_middle, y_middle), 10, (0, 255, 0), cv2.FILLED)

        dist = distance((x_index, y_index), (x_middle, y_middle))

        # Threshold to check if fingers are joined
        if dist < 40:
            if prev_x is not None and prev_y is not None:
                cv2.line(canvas, (prev_x, prev_y), (x_index, y_index), (0, 255, 0), 3)  # Green line
            prev_x, prev_y = x_index, y_index
        else:
            prev_x, prev_y = None, None

        mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
    else:
        prev_x, prev_y = None, None

    combined = cv2.addWeighted(frame, 0.6, canvas, 0.4, 0)
    cv2.imshow("Hand Drawing", combined)

    key = cv2.waitKey(1)
    if key == ord('c'):
        canvas = np.zeros_like(frame)
    elif key == 27:
        break

cap.release()
cv2.destroyAllWindows()
